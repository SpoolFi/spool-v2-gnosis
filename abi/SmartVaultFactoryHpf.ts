/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type GuardDefinitionStruct = {
  methodSignature: string;
  contractAddress: string;
  operator: BytesLike;
  expectedValue: BigNumberish;
  methodParamTypes: BigNumberish[];
  methodParamValues: BytesLike[];
};

export type GuardDefinitionStructOutput = [
  string,
  string,
  string,
  BigNumber,
  number[],
  string[]
] & {
  methodSignature: string;
  contractAddress: string;
  operator: string;
  expectedValue: BigNumber;
  methodParamTypes: number[];
  methodParamValues: string[];
};

export type SmartVaultSpecificationStruct = {
  smartVaultName: string;
  svtSymbol: string;
  baseURI: string;
  assetGroupId: BigNumberish;
  strategies: string[];
  strategyAllocation: BigNumberish;
  riskTolerance: BigNumberish;
  riskProvider: string;
  allocationProvider: string;
  actions: string[];
  actionRequestTypes: BigNumberish[];
  guards: GuardDefinitionStruct[][];
  guardRequestTypes: BigNumberish[];
  managementFeePct: BigNumberish;
  depositFeePct: BigNumberish;
  performanceFeePct: BigNumberish;
  allowRedeemFor: boolean;
};

export type SmartVaultSpecificationStructOutput = [
  string,
  string,
  string,
  BigNumber,
  string[],
  BigNumber,
  number,
  string,
  string,
  string[],
  number[],
  GuardDefinitionStructOutput[][],
  number[],
  number,
  number,
  number,
  boolean
] & {
  smartVaultName: string;
  svtSymbol: string;
  baseURI: string;
  assetGroupId: BigNumber;
  strategies: string[];
  strategyAllocation: BigNumber;
  riskTolerance: number;
  riskProvider: string;
  allocationProvider: string;
  actions: string[];
  actionRequestTypes: number[];
  guards: GuardDefinitionStructOutput[][];
  guardRequestTypes: number[];
  managementFeePct: number;
  depositFeePct: number;
  performanceFeePct: number;
  allowRedeemFor: boolean;
};

export interface SmartVaultFactoryHpfInterface extends utils.Interface {
  functions: {
    "deploySmartVault((string,string,string,uint256,address[],uint256,int8,address,address,address[],uint8[],(string,address,bytes2,uint256,uint8[],bytes[])[][],uint8[],uint16,uint16,uint16,bool))": FunctionFragment;
    "deploySmartVaultDeterministically((string,string,string,uint256,address[],uint256,int8,address,address,address[],uint8[],(string,address,bytes2,uint256,uint8[],bytes[])[][],uint8[],uint16,uint16,uint16,bool),bytes32)": FunctionFragment;
    "implementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "predictDeterministicAddress((string,string,string,uint256,address[],uint256,int8,address,address,address[],uint8[],(string,address,bytes2,uint256,uint8[],bytes[])[][],uint8[],uint16,uint16,uint16,bool),bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deploySmartVault"
      | "deploySmartVaultDeterministically"
      | "implementation"
      | "owner"
      | "predictDeterministicAddress"
      | "renounceOwnership"
      | "transferOwnership"
      | "upgradeTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploySmartVault",
    values: [SmartVaultSpecificationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deploySmartVaultDeterministically",
    values: [SmartVaultSpecificationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictDeterministicAddress",
    values: [SmartVaultSpecificationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "deploySmartVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploySmartVaultDeterministically",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictDeterministicAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SmartVaultDeployed(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartVaultDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SmartVaultDeployedEventObject {
  smartVault: string;
  deployer: string;
}
export type SmartVaultDeployedEvent = TypedEvent<
  [string, string],
  SmartVaultDeployedEventObject
>;

export type SmartVaultDeployedEventFilter =
  TypedEventFilter<SmartVaultDeployedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SmartVaultFactoryHpf extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmartVaultFactoryHpfInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploySmartVault(
      specification: SmartVaultSpecificationStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deploySmartVaultDeterministically(
      specification: SmartVaultSpecificationStruct,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    predictDeterministicAddress(
      specification: SmartVaultSpecificationStruct,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  deploySmartVault(
    specification: SmartVaultSpecificationStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deploySmartVaultDeterministically(
    specification: SmartVaultSpecificationStruct,
    salt: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  implementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  predictDeterministicAddress(
    specification: SmartVaultSpecificationStruct,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    deploySmartVault(
      specification: SmartVaultSpecificationStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    deploySmartVaultDeterministically(
      specification: SmartVaultSpecificationStruct,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    predictDeterministicAddress(
      specification: SmartVaultSpecificationStruct,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SmartVaultDeployed(address,address)"(
      smartVault?: string | null,
      deployer?: string | null
    ): SmartVaultDeployedEventFilter;
    SmartVaultDeployed(
      smartVault?: string | null,
      deployer?: string | null
    ): SmartVaultDeployedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    deploySmartVault(
      specification: SmartVaultSpecificationStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deploySmartVaultDeterministically(
      specification: SmartVaultSpecificationStruct,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    predictDeterministicAddress(
      specification: SmartVaultSpecificationStruct,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploySmartVault(
      specification: SmartVaultSpecificationStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deploySmartVaultDeterministically(
      specification: SmartVaultSpecificationStruct,
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predictDeterministicAddress(
      specification: SmartVaultSpecificationStruct,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
